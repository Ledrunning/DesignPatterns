using System;
using Observer.Stocks;

namespace Observer
{
    /// <summary>
    ///     Паттерн "Наблюдатель" (Observer) представляет поведенческий шаблон проектирования, который использует отношение
    ///     "один ко многим". В этом отношении есть один наблюдаемый объект и множество наблюдателей.
    ///     И при изменении наблюдаемого объекта автоматически происходит оповещение всех наблюдателей.
    ///     Данный паттерн еще называют Publisher-Subscriber(издатель-подписчик), поскольку отношения издателя и подписчиков
    ///     характеризуют
    ///     действие данного паттерна: подписчики подписываются email-рассылку определенного сайта.Сайт-издатель с помощью
    ///     email-рассылки уведомляет всех подписчиков о изменениях.
    ///     А подписчики получают изменения и производят определенные действия: могут зайти на сайт, могут проигнорировать
    ///     уведомления и т.д.
    ///     Когда использовать паттерн Наблюдатель?
    ///     - Когда система состоит из множества классов, объекты которых должны находиться в согласованных состояниях
    ///     - Когда общая схема взаимодействия объектов предполагает две стороны: одна рассылает сообщения и является главным,
    ///     другая получает сообщения
    ///     и реагирует на них.Отделение логики обеих сторон позволяет их рассматривать независимо и использовать отдельно
    ///     друга от друга.
    ///     Когда существует один объект, рассылающий сообщения, и множество подписчиков, которые получают сообщения.
    ///     При этом точное число подписчиков заранее неизвестно и процессе работы программы может изменяться.
    /// </summary>
    internal class Program
    {
        private static void Main(string[] args)
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.Title = "Observer";

            var stock = new Stock();

            var bank = new Bank("ЮнитБанк", stock);
            var broker = new Broker("Василий Иванович", stock);

            // Имитация торгов
            stock.Market();

            broker.StopTrade();

            // имитация торгов
            stock.Market();

            Console.ReadKey();
        }
    }
}