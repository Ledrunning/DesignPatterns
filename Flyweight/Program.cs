using System;

namespace Flyweight
{
    /// <summary>
    ///     Паттерн Приспособленец (Flyweight) - структурный шаблон проектирования, который позволяет использовать разделяемые
    ///     объекты сразу в нескольких контекстах.
    ///     Данный паттерн используется преимущественно для оптимизации работы с памятью.
    ///     В качестве стандартного применения данного паттерна можно привести следующий пример.Текст состоит из отдельных
    ///     символов.
    ///     Каждый символ может встречаться на одной странице текста много раз. Однако в компьютерной программе было бы слишком
    ///     накладно выделять память для каждого отдельного символа в тексте.
    ///     Гораздо проще было бы определить полный набор символов, например, в виде таблицы из 128 знаков (алфавитно-цифровые
    ///     символы в разных регистрах, знаки препинания и т.д.).
    ///     А в тексте применить этот набор общих разделяемых символов, вместо сотен и тысяч объектов, которые могли бы
    ///     использоваться в тексте.
    ///     И как следствие подобного подхода будет уменьшение количества используемых объектов и уменьшение используемой
    ///     памяти.
    ///     Паттерн Приспособленец следует применять при соблюдении всех следующих условий:
    ///     Когда приложение использует большое количество однообразных объектов, из-за чего происходит выделение большого
    ///     количества памяти
    ///     Когда часть состояния объекта, которое является изменяемым, можно вынести во вне.
    ///     Вынесение внешнего состояния позволяет заменить множество объектов небольшой группой общих разделяемых объектов.
    /// </summary>
    internal class Program
    {
        private static void Main(string[] args)
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.Title = "FlyWeight";

            var longitude = 37.61;
            var latitude = 55.74;

            var houseFactory = new HouseFactory();
            for (var i = 0; i < 5; i++)
            {
                var panelHouse = houseFactory.GetHouse("Panel");
                if (panelHouse != null)
                    panelHouse.Build(longitude, latitude);
                longitude += 0.1;
                latitude += 0.1;
            }

            for (var i = 0; i < 5; i++)
            {
                var brickHouse = houseFactory.GetHouse("Brick");
                if (brickHouse != null)
                    brickHouse.Build(longitude, latitude);
                longitude += 0.1;
                latitude += 0.1;
            }

            Console.ReadKey();
        }
    }
}